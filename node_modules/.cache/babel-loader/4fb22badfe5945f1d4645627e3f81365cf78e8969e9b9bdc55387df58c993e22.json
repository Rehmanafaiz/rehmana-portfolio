{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rehana\\\\OneDrive\\\\Desktop\\\\Frontend Project\\\\rehmana-portfolio\\\\src\\\\components\\\\Projects.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Projects = () => /*#__PURE__*/_jsxDEV(\"section\", {\n  className: \"projects\",\n  id: \"projects\",\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Projects\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"TreeVisualizer: BST & AVL Tree Analysis Tool\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Developed a web application with Next.js, React, and TypeScript to visualize and analyze Binary Search Tree and AVL tree data structures.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Implemented dynamic SVG rendering of tree structures and comparative data plots using Recharts.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Engineered logic to calculate and report on algorithmic efficiency, including operational frequency and tree height.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Built a modern, responsive UI for user input and data analysis using Tailwind CSS and ShadCN.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          children: \"GitHub: AVL-Tree-Visualizer Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"A* Pathfinder Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Built an interactive A* pathfinding visualizer using Next.js, React, and TypeScript to demonstrate the algorithm's core mechanics.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Engineered two dynamic, custom-rendered SVG components: a main node graph and a unique exploration tree that traces the algorithm's decision process.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Implemented a rich UI with step-by-step simulation controls and features for users to create and test their own custom graphs.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Developed a custom A* algorithm from scratch, with detailed state tracking to enable accurate, frame-by-frame visualization.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          children: \"GitHub: A-Star-Visualization Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Audio Player \\u2013 Software Design Patterns\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Built a modular audio player using Strategy, Fa\\xE7ade & Controller, Factory Method, Observer, Singleton and Adapter patterns for clean, scalable architecture.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Enabled flexible playback modes and audio states with encapsulated, maintainable logic.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          children: \"GitHub: AudioPlayer_DP Project\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this);\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Projects","className","id","children","fileName","_jsxFileName","lineNumber","columnNumber","href","_c","$RefreshReg$"],"sources":["C:/Users/Rehana/OneDrive/Desktop/Frontend Project/rehmana-portfolio/src/components/Projects.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst Projects = () => (\r\n  <section className=\"projects\" id=\"projects\">\r\n    <h2>Projects</h2>\r\n    <div className=\"project-card\">\r\n      <h3>TreeVisualizer: BST & AVL Tree Analysis Tool</h3>\r\n      <ul>\r\n        <li>Developed a web application with Next.js, React, and TypeScript to visualize and analyze Binary Search Tree and AVL tree data structures.</li>\r\n        <li>Implemented dynamic SVG rendering of tree structures and comparative data plots using Recharts.</li>\r\n        <li>Engineered logic to calculate and report on algorithmic efficiency, including operational frequency and tree height.</li>\r\n        <li>Built a modern, responsive UI for user input and data analysis using Tailwind CSS and ShadCN.</li>\r\n        <li><a href=\"#\">GitHub: AVL-Tree-Visualizer Project</a></li>\r\n      </ul>\r\n    </div>\r\n    <div className=\"project-card\">\r\n      <h3>A* Pathfinder Visualizer</h3>\r\n      <ul>\r\n        <li>Built an interactive A* pathfinding visualizer using Next.js, React, and TypeScript to demonstrate the algorithm's core mechanics.</li>\r\n        <li>Engineered two dynamic, custom-rendered SVG components: a main node graph and a unique exploration tree that traces the algorithm's decision process.</li>\r\n        <li>Implemented a rich UI with step-by-step simulation controls and features for users to create and test their own custom graphs.</li>\r\n        <li>Developed a custom A* algorithm from scratch, with detailed state tracking to enable accurate, frame-by-frame visualization.</li>\r\n        <li><a href=\"#\">GitHub: A-Star-Visualization Project</a></li>\r\n      </ul>\r\n    </div>\r\n    <div className=\"project-card\">\r\n      <h3>Audio Player – Software Design Patterns</h3>\r\n      <ul>\r\n        <li>Built a modular audio player using Strategy, Façade & Controller, Factory Method, Observer, Singleton and Adapter patterns for clean, scalable architecture.</li>\r\n        <li>Enabled flexible playback modes and audio states with encapsulated, maintainable logic.</li>\r\n        <li><a href=\"#\">GitHub: AudioPlayer_DP Project</a></li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n);\r\n\r\nexport default Projects;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAA,kBACfD,OAAA;EAASE,SAAS,EAAC,UAAU;EAACC,EAAE,EAAC,UAAU;EAAAC,QAAA,gBACzCJ,OAAA;IAAAI,QAAA,EAAI;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,eACjBR,OAAA;IAAKE,SAAS,EAAC,cAAc;IAAAE,QAAA,gBAC3BJ,OAAA;MAAAI,QAAA,EAAI;IAA4C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrDR,OAAA;MAAAI,QAAA,gBACEJ,OAAA;QAAAI,QAAA,EAAI;MAAyI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClJR,OAAA;QAAAI,QAAA,EAAI;MAA+F;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxGR,OAAA;QAAAI,QAAA,EAAI;MAAoH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7HR,OAAA;QAAAI,QAAA,EAAI;MAA6F;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtGR,OAAA;QAAAI,QAAA,eAAIJ,OAAA;UAAGS,IAAI,EAAC,GAAG;UAAAL,QAAA,EAAC;QAAmC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC,eACNR,OAAA;IAAKE,SAAS,EAAC,cAAc;IAAAE,QAAA,gBAC3BJ,OAAA;MAAAI,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCR,OAAA;MAAAI,QAAA,gBACEJ,OAAA;QAAAI,QAAA,EAAI;MAAkI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3IR,OAAA;QAAAI,QAAA,EAAI;MAAqJ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9JR,OAAA;QAAAI,QAAA,EAAI;MAA8H;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvIR,OAAA;QAAAI,QAAA,EAAI;MAA4H;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrIR,OAAA;QAAAI,QAAA,eAAIJ,OAAA;UAAGS,IAAI,EAAC,GAAG;UAAAL,QAAA,EAAC;QAAoC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC,eACNR,OAAA;IAAKE,SAAS,EAAC,cAAc;IAAAE,QAAA,gBAC3BJ,OAAA;MAAAI,QAAA,EAAI;IAAuC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChDR,OAAA;MAAAI,QAAA,gBACEJ,OAAA;QAAAI,QAAA,EAAI;MAA4J;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrKR,OAAA;QAAAI,QAAA,EAAI;MAAuF;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChGR,OAAA;QAAAI,QAAA,eAAIJ,OAAA;UAAGS,IAAI,EAAC,GAAG;UAAAL,QAAA,EAAC;QAA8B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACC,CACV;AAACE,EAAA,GAhCIT,QAAQ;AAkCd,eAAeA,QAAQ;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}